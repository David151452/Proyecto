
package ventana;

import java.awt.Graphics;
import java.awt.Image;
import java.util.ArrayList;
import javax.swing.ImageIcon;

import javax.swing.JPanel;
import modelo.Cliente;
import modelo.Veterinario;

/*
 * @author David Bravo
 * @author Solange Soto
 * @author Orlando Mendoza
 * @author Lucianno Valdebenito
 */

//Hereda de JFrame.
public class VentanaInicio extends javax.swing.JFrame {
    //Fondo para poner una imagen en el panel
    FondoPanel fondo = new FondoPanel();
    ArrayList<Veterinario> lista;

    public VentanaInicio(ArrayList<Veterinario> lista) {
        this.lista = lista;
        //Se le entrega al panel la imagen de fondo
        this.setContentPane(fondo);
        initComponents();
        //Cambiar el icono de la aplicación que se encuentra arriba la izquierda
        setIconImage(new ImageIcon(getClass().getResource("/Vetpeticono.png")).getImage());
    }

    public VentanaInicio() {
        //Se le entrega al panel la imagen de fondo
        this.setContentPane(fondo);
        initComponents();
        //Cambiar el icono de la aplicación que se encuentra arriba la izquierda
        setIconImage(new ImageIcon(getClass().getResource("/Vetpeticono.png")).getImage());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new FondoPanel();
        InicioJL = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        UsuarioJT = new javax.swing.JTextField();
        SalirBTN = new javax.swing.JButton();
        IngresarBTN = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        InicioJL.setFont(new java.awt.Font("Segoe UI Semibold", 0, 24)); // NOI18N
        InicioJL.setText("INICIO");

        jLabel1.setText("Nombre de usuario:");

        jLabel2.setText("Contraseña:");

        UsuarioJT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UsuarioJTActionPerformed(evt);
            }
        });

        SalirBTN.setText("Salir");
        SalirBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SalirBTNActionPerformed(evt);
            }
        });

        IngresarBTN.setText("Ingresar");
        IngresarBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IngresarBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(InicioJL)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(SalirBTN)
                            .addGap(18, 18, 18)
                            .addComponent(IngresarBTN))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(UsuarioJT)
                                .addComponent(jPasswordField1, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)))))
                .addContainerGap(460, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InicioJL)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(UsuarioJT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 240, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SalirBTN)
                    .addComponent(IngresarBTN))
                .addGap(71, 71, 71))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void UsuarioJTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UsuarioJTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UsuarioJTActionPerformed

    private void SalirBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SalirBTNActionPerformed
        System.exit(0);
    }//GEN-LAST:event_SalirBTNActionPerformed

    private void IngresarBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IngresarBTNActionPerformed
        iniciarSesión();
        iniciarSesión(lista);
    }//GEN-LAST:event_IngresarBTNActionPerformed

    public void iniciarSesión(ArrayList<Veterinario> veterinarios) {
        //Crear una mini base de datos para ingresar como cliente o como veterinario
        ArrayList<Cliente> clientes = new ArrayList<>();
        //ArrayList<Veterinario> veterinarios = new ArrayList<>();
        //Crear clientes
        Cliente cliente1 = new Cliente("Cliente", 19, "78598627", "20.232.123-0", "Hola");
        /*Cliente cliente2 = new Cliente("Solange Soto", 19, "78598627", "20.276.298-2", "Hola123");*/
        //Añadir los cientes a el arraylist
        clientes.add(cliente1);
        /*clientes.add(cliente2);*/
        //Crear veterinarios
        Veterinario veterinario1 = new Veterinario("Veterinario", 26, "82718121", "21.821.572-2", "Buenas");
        /*Veterinario veterinario2 = new Veterinario("Pedro", 25, "21873892", "32.232.432-3", "Buenas123");*/
        //Añadir los clientes a el arraylist
        //veterinarios.add(veterinario1);
        /*veterinarios.add(veterinario2);*/

        for (int i = 0; i < clientes.size(); i++) {
            //Se ocupa un equalsIgnoreCase debido a que este 
            //Compara cada uno de los objetos dentro de lista
            //Sin importar si tienen mayusculas o minusculas
            String aux1 = jPasswordField1.getText();
            String aux2 = UsuarioJT.getText();
            //El nombre de usuario no importa si va con mayusculas o con minusculas por eso el equalsIgnoreCase
            if (clientes.get(i).getNombre().equalsIgnoreCase(aux2)) {
                /*
                *La contraseña debe ir como corresponde con sus mayusculas y minusculas
                *por lo tanto debe ocuaparse equals
                 */
                if (clientes.get(i).getContrasena().equals(aux1)) {
                    VentanaCliente ventana1 = new VentanaCliente(lista);
                    ventana1.setVisible(true);
                    veterinarios.remove(veterinario1);
                    this.setVisible(false);
                }
            }
            //El nombre de usuario no importa si va con mayusculas o con minusculas por eso el equalsIgnoreCase
            if (veterinarios.get(i).getNombre().equalsIgnoreCase(aux2)) {
                /*
                *La contraseña debe ir como corresponde con sus mayusculas y minusculas
                *por lo tanto debe ocuaparse equals
                 */
                if (veterinarios.get(i).getContrasena().equals(aux1)) {
                    VentanaVeterinario ventana1 = new VentanaVeterinario();
                    ventana1.setVisible(true);
                    veterinarios.remove(veterinario1);
                    this.setVisible(false);
                }
            }
        }
    }

    public void iniciarSesión() {
        //Crear una mini base de datos para ingresar como cliente o como veterinario
        ArrayList<Cliente> clientes = new ArrayList<>();
        ArrayList<Veterinario> veterinarios = new ArrayList<>();
        //Crear clientes
        Cliente cliente1 = new Cliente("Cliente", 19, "78598627", "20.232.123-0", "Hola");
        /*Cliente cliente2 = new Cliente("Solange Soto", 19, "78598627", "20.276.298-2", "Hola123");*/
        //Añadir los cientes a el arraylist
        clientes.add(cliente1);
        /*clientes.add(cliente2);*/
        //Crear veterinarios
        Veterinario veterinario1 = new Veterinario("Veterinario", 26, "82718121", "21.821.572-2", "Buenas");
        Veterinario v1 = new Veterinario("Pedro", 26, "9876578", "21.821.572-2", "Buenas", "Perro", "Arturo perez canto #500", 10000, "Vetpet@gmail.com");
        Veterinario v2 = new Veterinario("Matias", 43, "9856785", "87.987.987-9", "Buenas", "Gato", "Acceso s/n Lautaro", 12000, "Feliz@gmail.com");
        Veterinario v3 = new Veterinario("Orlando", 32, "98754578", "87.876.879-1", "Buenas", "Caballo", "Escala 651 Lautaro", 7000, "Animal@gmail.com");
        /*Veterinario veterinario2 = new Veterinario("Pedro", 25, "21873892", "32.232.432-3", "Buenas123");*/
        //Añadir losc leitnes a el arraylist
        veterinarios.add(veterinario1);
        veterinarios.add(v1);
        veterinarios.add(v2);
        veterinarios.add(v3);
        /*veterinarios.add(veterinario2);*/

        for (int i = 0; i < clientes.size(); i++) {
            //Se ocupa un equalsIgnoreCase debido a que este 
            //Compara cada uno de los objetos dentro de lista
            //Sin importar si tienen mayusculas o minusculas
            String aux1 = jPasswordField1.getText();
            String aux2 = UsuarioJT.getText();
            //El nombre de usuario no importa si va con mayusculas o con minusculas por eso el equalsIgnoreCase
            if (clientes.get(i).getNombre().equalsIgnoreCase(aux2)) {
                /*
                *La contraseña debe ir como corresponde con sus mayusculas y minusculas
                *por lo tanto debe ocuaparse equals
                 */
                if (clientes.get(i).getContrasena().equals(aux1)) {
                    VentanaCliente ventana1 = new VentanaCliente(veterinarios);
                    veterinarios.remove(veterinario1);
                    ventana1.setVisible(true);
                    this.setVisible(false);
                }
            }
            //El nombre de usuario no importa si va con mayusculas o con minusculas por eso el equalsIgnoreCase
            if (veterinarios.get(i).getNombre().equalsIgnoreCase(aux2)) {
                /*
                *La contraseña debe ir como corresponde con sus mayusculas y minusculas
                *por lo tanto debe ocuaparse equals
                 */
                if (veterinarios.get(i).getContrasena().equals(aux1)) {
                    VentanaVeterinario ventana1 = new VentanaVeterinario();
                    ventana1.setVisible(true);
                    veterinarios.remove(veterinario1);
                    this.setVisible(false);
                }
            }
        }
    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton IngresarBTN;
    private javax.swing.JLabel InicioJL;
    private javax.swing.JButton SalirBTN;
    private javax.swing.JTextField UsuarioJT;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPasswordField jPasswordField1;
    // End of variables declaration//GEN-END:variables

    //Codigo para crear un fondo dentro de la VentanaInicio
    //Se crea una clase para hacer el fondo
    //Crear una variable de tipo Image
    class FondoPanel extends JPanel {

        private Image imagen;

        @Override
        public void paint(Graphics g) {
            imagen = new ImageIcon(getClass().getResource("/imagen/Vetpetlogo.png")).getImage();
            //Pintar el fondo con nuestra imagen en tamaño igual al panel
            g.drawImage(imagen, 0, 0, getWidth(), getHeight(), this);

            setOpaque(false); //Es para que muestre el fondo que nosotros pusimos

            super.paint(g); //Metodo paint para que salgan todos los componentes
        }
    }
}
